apiVersion: v1
kind: Namespace
metadata:
  name: kong
---
#######################################
# Kong database migration
#######################################
apiVersion: batch/v1
kind: Job
metadata:
  name: kong-migrations
  namespace: kong
spec:
  template:
    metadata:
      name: kong-migrations
      namespace: kong
    spec:
      containers:
        - name: kong-migrations
          image: kong
          env:
            - name: KONG_NGINX_DAEMON
              value: 'off'
            - name: KONG_DATABASE
              value: postgres
            - name: KONG_PG_DATABASE
              valueFrom:
                secretKeyRef:
                  name: postgres-configuration
                  key: POSTGRES_DB
            - name: KONG_PG_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-configuration
                  key: POSTGRES_USER
            - name: KONG_PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-configuration
                  key: POSTGRES_PASSWORD
            - name: KONG_PG_HOST
              value: kong-postgres
            - name: KONG_PG_PORT
              value: "5432"
          command: [ "/bin/sh", "-c", "kong migrations bootstrap", "--vv" ]
      restartPolicy: Never
---

#######################################
# Kong Permissions
#######################################
# Role for kong ingress controller
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kong-service-account
  namespace: kong
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: kong-ingress-clusterrole
rules:
  - apiGroups:
      - ""
    resources:
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - "configuration.konghq.com"
    resources:
      - kongplugins
      - kongcredentials
      - kongconsumers
      - kongingresses
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: kong-ingress-role
  namespace: kong
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<ingress-controller-leader>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - "ingress-controller-leader-kong"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: kong-ingress-role-nisa-binding
  namespace: kong
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kong-ingress-role
subjects:
  - kind: ServiceAccount
    name: kong-service-account
    namespace: kong
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: kong-ingress-clusterrole-nisa-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kong-ingress-clusterrole
subjects:
  - kind: ServiceAccount
    name: kong-service-account
    namespace: kong
---
#######################################
# Kong Roles
#######################################
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: kongplugins.configuration.konghq.com
spec:
  group: configuration.konghq.com
  version: v1
  scope: Namespaced
  names:
    kind: KongPlugin
    plural: kongplugins
    shortNames:
      - kp
  additionalPrinterColumns:
    - name: Plugin-Type
      type: string
      description: Name of the plugin
      JSONPath: .plugin
    - name: Age
      type: date
      description: Age
      JSONPath: .metadata.creationTimestamp
    - name: Disabled
      type: boolean
      description: Indicates if the plugin is disabled
      JSONPath: .disabled
      priority: 1
    - name: Config
      type: string
      description: Configuration of the plugin
      JSONPath: .config
      priority: 1
  validation:
    openAPIV3Schema:
      required:
        - plugin
      properties:
        plugin:
          type: string
        disabled:
          type: boolean
        config:
          type: object
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: kongconsumers.configuration.konghq.com
spec:
  group: configuration.konghq.com
  version: v1
  scope: Namespaced
  names:
    kind: KongConsumer
    plural: kongconsumers
    shortNames:
      - kc
  additionalPrinterColumns:
    - name: Username
      type: string
      description: Username of a Kong Consumer
      JSONPath: .username
    - name: Age
      type: date
      description: Age
      JSONPath: .metadata.creationTimestamp
  validation:
    openAPIV3Schema:
      properties:
        username:
          type: string
        custom_id:
          type: string
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: kongcredentials.configuration.konghq.com
spec:
  group: configuration.konghq.com
  version: v1
  scope: Namespaced
  names:
    kind: KongCredential
    plural: kongcredentials
  additionalPrinterColumns:
    - name: Credential-type
      type: string
      description: Type of credential
      JSONPath: .type
    - name: Age
      type: date
      description: Age
      JSONPath: .metadata.creationTimestamp
    - name: Consumer-Ref
      type: string
      description: Owner of the credential
      JSONPath: .consumerRef
  validation:
    openAPIV3Schema:
      required:
        - consumerRef
        - type
      properties:
        consumerRef:
          type: string
        type:
          type: string
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: kongingresses.configuration.konghq.com
spec:
  group: configuration.konghq.com
  version: v1
  scope: Namespaced
  names:
    kind: KongIngress
    plural: kongingresses
    shortNames:
      - ki
  validation:
    openAPIV3Schema:
      properties:
        upstream:
          type: object
        route:
          properties:
            methods:
              type: array
              items:
                type: string
            regex_priority:
              type: integer
            strip_path:
              type: boolean
            preserve_host:
              type: boolean
            protocols:
              type: array
              items:
                type: string
                enum:
                  - http
                  - https
        proxy:
          type: object
          properties:
            protocol:
              type: string
              enum:
                - http
                - https
            path:
              type: string
              pattern: ^/.*$
            retries:
              type: integer
              minimum: 0
            connect_timeout:
              type: integer
              minimum: 0
            read_timeout:
              type: integer
              minimum: 0
            write_timeout:
              type: integer
              minimum: 0
        upstream:
          type: object
          properties:
            hash_on:
              type: string
            hash_on_cookie:
              type: string
            hash_on_cookie_path:
              type: string
            hash_on_header:
              type: string
            hash_fallback_header:
              type: string
            hash_fallback:
              type: string
            slots:
              type: integer
              minimum: 10
            healthchecks:
              type: object
              properties:
                active:
                  type: object
                  properties:
                    concurrency:
                      type: integer
                      minimum: 1
                    timeout:
                      type: integer
                      minimum: 0
                    http_path:
                      type: string
                      pattern: ^/.*$
                    healthy: &healthy
                      type: object
                      properties:
                        http_statuses:
                          type: array
                          items:
                            type: integer
                        interval:
                          type: integer
                          minimum: 0
                        successes:
                          type: integer
                          minimum: 0
                    unhealthy: &unhealthy
                      type: object
                      properties:
                        http_failures:
                          type: integer
                          minimum: 0
                        http_statuses:
                          type: array
                          items:
                            type: integer
                        interval:
                          type: integer
                          minimum: 0
                        tcp_failures:
                          type: integer
                          minimum: 0
                        timeout:
                          type: integer
                          minimum: 0
                passive:
                  type: object
                  properties:
                    healthy: *healthy
                    unhealthy: *unhealthy
---
#######################################
# Kong: The API Gateway
#######################################
apiVersion: v1
kind: Service
metadata:
  name: kong-admin
  namespace: kong
spec:
  type: ClusterIP
  ports:
    - name: kong-admin
      port: 8001
      targetPort: 8001
      protocol: TCP
  selector:
    app: kong-admin
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kong-admin
  name: kong-admin
  namespace: kong
spec:
  selector:
    matchLabels:
      app: kong-admin
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: kong-admin
    spec:
      hostAliases:
        - ip: "192.168.49.2"
          hostnames:
            - "auth.keycloak.local"
      containers:
        - name: admin-api
          image: kong-oidc:1.0
          env:
            - name: KONG_DATABASE
              value: postgres
            - name: KONG_PG_DATABASE
              valueFrom:
                secretKeyRef:
                  name: postgres-configuration
                  key: POSTGRES_DB
            - name: KONG_PG_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-configuration
                  key: POSTGRES_USER
            - name: KONG_PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-configuration
                  key: POSTGRES_PASSWORD
            - name: KONG_PG_HOST
              value: kong-postgres
            - name: KONG_PG_PORT
              value: "5432"
            - name: KONG_ADMIN_ACCESS_LOG
              value: /dev/stdout
            - name: KONG_ADMIN_ERROR_LOG
              value: /dev/stderr
            - name: KONG_ADMIN_LISTEN
              value: 0.0.0.0:8001
            - name: KONG_PROXY_LISTEN
              value: 'off'
            - name: KONG_PLUGINS
              value: "bundled,oidc"
          ports:
            - name: kong-admin-port
              containerPort: 8001
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /status
              port: 8001
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 3
---
apiVersion: v1
kind: Service
metadata:
  name: kong-ingress-controller
  namespace: kong
spec:
  type: ClusterIP
  ports:
    - name: kong-ingress
      port: 10254
      targetPort: 10254
      protocol: TCP
  selector:
    app: kong-ingress-controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kong-ingress-controller
  name: kong-ingress-controller
  namespace: kong
spec:
  selector:
    matchLabels:
      app: kong-ingress-controller
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # the returned metrics are related to the kong ingress controller not kong itself
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
      labels:
        app: kong-ingress-controller
    spec:
      serviceAccountName: kong-service-account
      hostAliases:
          - ip: "192.168.49.2"
            hostnames:
              - "auth.keycloak.local"
      containers:
        - name: kong-ingress-controller
          env:
            - name: CONTROLLER_KONG_ADMIN_URL
              value: http://kong-admin.kong:8001
            - name: CONTROLLER_KONG_ADMIN_TLS_SKIP_VERIFY
              value: "true"
            - name: CONTROLLER_PUBLISH_SERVICE
              value: kong/kong-proxy
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
          image: kong-docker-kubernetes-ingress-controller.bintray.io/kong-ingress-controller:latest
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 3
---
apiVersion: v1
kind: Service
metadata:
  name: kong-proxy
  namespace: kong
  labels:
    app: kong-proxy
  annotations:
    external-dns.alpha.kubernetes.io/hostname: " {{ .kongProxyDNS }} "
    service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: "app=kong-proxy"
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
spec:
  externalTrafficPolicy: Local
  type: LoadBalancer
  ports:
    - name: kong-proxy-ssl
      port: 443
      targetPort: 8443
      protocol: TCP
    - name: kong-proxy
      port: 80
      targetPort: 8000
      protocol: TCP
  selector:
    app: kong-proxy
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kong-proxy
  namespace: kong
spec:
  selector:
    matchLabels:
      app: kong-proxy
  replicas: 1
  template:
    metadata:
      labels:
        name: kong-proxy
        app: kong-proxy
    spec:
      hostAliases:
        - ip: "192.168.49.2"
          hostnames:
            - "auth.keycloak.local"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - kong-proxy
                topologyKey: kubernetes.io/hostname
      containers:
        - name: kong-proxy
          image: kong-oidc:1.0
          env:
            - name: KONG_DATABASE
              value: postgres
            - name: KONG_PG_DATABASE
              valueFrom:
                secretKeyRef:
                  name: postgres-configuration
                  key: POSTGRES_DB
            - name: KONG_PG_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-configuration
                  key: POSTGRES_USER
            - name: KONG_PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-configuration
                  key: POSTGRES_PASSWORD
            - name: KONG_PG_HOST
              value: kong-postgres
            - name: KONG_PG_PORT
              value: "5432"
            - name: KONG_PROXY_ACCESS_LOG
              value: "/dev/stdout"
            - name: KONG_PROXY_ERROR_LOG
              value: "/dev/stderr"
            - name: KONG_ADMIN_LISTEN
              value: 'off'
            - name: KONG_PLUGINS
              value: "bundled,oidc"
          ports:
            - name: proxy
              containerPort: 8000
              protocol: TCP
            - name: proxy-ssl
              containerPort: 8443
              protocol: TCP
          readinessProbe:
            exec:
              command:
                - kong
                - health
          livenessProbe:
            exec:
              command:
                - kong
                - health
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kong-admin-ing
  namespace: kong
  labels:
    app: kong-admin
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: api.kong-admin.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: kong-admin
                port:
                  number: 8001
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kong-proxy-ing
  namespace: kong
  labels:
    app: kong-proxy
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: api.kong-gateway.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: kong-proxy
                port:
                  number: 80
---
#######################################
# Konga: Kong GUI
#######################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: konga
  labels:
    app: konga
    version: v1
  namespace: kong
spec:
  replicas: 1
  selector:
    matchLabels:
      app: konga
      version: v1
  template:
    metadata:
      labels:
        app: konga
        version: v1
    spec:
      containers:
        - name: konga
          image: pantsel/konga:latest
#          command: ["node ./bin/konga.js  prepare --adapter postgres --uri postgresql://konguser:kongdbpassword@kong-postgres:5432/kongdb"]
          env:
            - name: DB_ADAPTER
              value: postgres
            - name: DB_HOST
              value: kong-postgres
            - name: DB_PORT
              value: "5432"
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-configuration
                  key: POSTGRES_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-configuration
                  key: POSTGRES_PASSWORD
            - name: DB_DATABASE
              valueFrom:
                secretKeyRef:
                  name: postgres-configuration
                  key: POSTGRES_DB
            - name: NODE_ENV
              value: production
          ports:
            - containerPort: 1337
              protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: konga
  name: konga
  namespace: kong
spec:
  ports:
    - protocol: TCP
      port: 1337
      targetPort: 1337
  selector:
    app: konga
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: konga-ing
  namespace: kong
  labels:
    app: konga
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: api.konga.local
      http:
        paths:
            - path: /
              pathType: Prefix
              backend:
                service:
                  name: konga
                  port:
                    number: 1337
---
