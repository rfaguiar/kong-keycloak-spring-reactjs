apiVersion: v1
kind: Namespace
metadata:
  name: keycloak
---
#######################################
# Keycloak database
#######################################
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  namespace: keycloak
  name: minikube-standard
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
provisioner: k8s.io/minikube-hostpath
---
kind: PersistentVolume
apiVersion: v1
metadata:
  namespace: keycloak
  name: keycloak-postgres-pv
  labels:
    app: postgres
    type: local
spec:
  storageClassName: minikube-standard
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/var/data"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  namespace: keycloak
  name: keycloak-postgres-pv-claim
  labels:
    app: postgres
spec:
  storageClassName: minikube-standard
  capacity:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Secret
metadata:
  namespace: keycloak
  name: postgres-configuration
  labels:
    app: postgres
data:
  POSTGRES_DB: a2V5Y2xvYWtkYg==
  POSTGRES_USER: a2V5Y2xvYWt1c2Vy
  POSTGRES_PASSWORD: a2V5Y2xvYWtwYXNzd29yZA==
  PGDATA: L3Zhci9saWIvcG9zdGdyZXNxbC9kYXRhL3BnZGF0YQ==
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: keycloak
  name: postgres-statefulset
  labels:
    app: postgres
spec:
  serviceName: "postgres"
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:9.6
          envFrom:
            - secretRef:
                name: postgres-configuration
          ports:
            - containerPort: 5432
              name: postgresdb
          volumeMounts:
            - name: pv-data
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: pv-data
          persistentVolumeClaim:
            claimName: keycloak-postgres-pv-claim
---
# Kong postgres service
apiVersion: v1
kind: Service
metadata:
  name: keycloak-postgres
  namespace: keycloak
  labels:
    app: postgres
spec:
  type: ClusterIP
  selector:
    app: postgres
  ports:
    - protocol: TCP
      name: http
      port: 5432
---
#######################################
# Keycloak auth server
#######################################
apiVersion: v1
kind: Service
metadata:
  namespace: keycloak
  name: keycloak
  labels:
    app: keycloak
spec:
  ports:
    - name: http
      port: 8080
      targetPort: 8080
  selector:
    app: keycloak
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak
  namespace: keycloak
  labels:
    app: keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      containers:
        - name: keycloak
          image: quay.io/keycloak/keycloak:12.0.1
          env:
            - name: KEYCLOAK_USER
              value: "admin"
            - name: KEYCLOAK_PASSWORD
              value: "admin"
            - name: PROXY_ADDRESS_FORWARDING
              value: "true"
            - name: DB_VENDOR
              value: POSTGRES
            - name: DB_ADDR
              value: keycloak-postgres
            - name: DB_PORT
              value: "5432"
            - name: DB_DATABASE
              valueFrom:
                secretKeyRef:
                  name: postgres-configuration
                  key: POSTGRES_DB
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-configuration
                  key: POSTGRES_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-configuration
                  key: POSTGRES_PASSWORD
          ports:
            - name: http
              containerPort: 8080
            - name: https
              containerPort: 8443
          readinessProbe:
            httpGet:
              path: /auth/realms/master
              port: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: keycloak-ing
  namespace: keycloak
  labels:
    app: keycloack
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: auth.keycloak.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: keycloak
                port:
                  number: 8080